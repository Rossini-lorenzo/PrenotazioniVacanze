package com.example.PrenotazioniVacanzeSpring;


import java.sql.Date;

import javax.persistence.EnumType;
import javax.persistence.Enumerated;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.PrenotazioniVacanzeSpring.Recensione.stelle;
import com.example.PrenotazioniVacanzeSpring.Utente.Sesso;
import com.example.PrenotazioniVacanzeSpring.Vacanza.pensione;
import com.example.PrenotazioniVacanzeSpring.Vacanza.tipoMezzo;
//http://localhost:8080/demo/addUser?nome=matteo&cognome=rossi&dataNascita=2020-10-10&email=matteorossi@gmail.com&indirizzo=via roma&telefono=333329329&codiceCartaIdentita=ca2112da&sesso=m&nomeUtente=matXD&passwordUtente=123
@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UtenteRepository utenteRepository;
  private VacanzaRepository viaggioRepository;
  private VacanzaRepository alloggioRepository;
  private VacanzaRepository pacchettoRepository;
  private RecensioneRepository recensioneRepository;
  private StoricoPrenotazioneRepository storicoPrenotazioneRepository;
  private PrenotazioneRepository prenotazioneRepository;
  private OffertaRepository offertaRepository;

  // AGGIUNTA NUOVO UTENTE 
  @CrossOrigin(origins="*")
  @PostMapping(path="/addUser") // Map ONLY POST Requests
  public ResponseEntity<Object> addNewUser (@RequestBody Utente utente) {
    // @ResponseBody means the returned String is the n, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    
    
    /*
    n.setNome(nome);
    n.setEmail(email);
    n.setCognome(cognome);
    n.setDataNascita(dataNascita);
    n.setIndirizzo(indirizzo);
    n.setTelefono(telefono);
    n.setCodiceCartaIdentita(codiceCartaIdentita);
    n.setSesso(sesso);
    n.setNomeUtente(nomeUtente);
    n.setPasswordUtente(passwordUtente);
    */
    utenteRepository.save(utente);
    return new ResponseEntity<Object>(utente,HttpStatus.OK);
  }
  
  //AGGIUNTA NUOVA OFFERTA
  @PostMapping(path="/addOfferta") // Map ONLY POST Requests
  public @ResponseBody String addNewOffera (@RequestParam Integer prezzo,@RequestParam Vacanza vacanza
		  ,@RequestParam Date dataInizio,@RequestParam Date dataFine) {
  Offerta o = new Offerta();
  o.setPrezzo(prezzo);
  o.setVacanze(vacanza);      // aggiungo una vacanza nel set delle vacanze
  o.setDateInizio(dataInizio); 
  o.setDataFine(dataFine);
  offertaRepository.save(o);
  return "Saved";
  }

  //AGGIUNTA NUOVO ALLOGGIO
  @PostMapping(path="/addAlloggio") // Map ONLY POST Requests
  public @ResponseBody String addNewAlloggio (@RequestParam String descrizione,@RequestParam String destinazione,
		  @RequestParam pensione pensione,@RequestParam Integer nMaxPartecipanti,@RequestParam Integer nStanzeLetto,
		  @RequestParam Integer nBagni,@RequestParam Integer nLetti,@RequestParam Offerta offerta) {
  Vacanza a = new Vacanza();
  a.setCodAlloggio(a.getIdVacanza());
  a.setDescrizione(descrizione);
  a.setDestinazione(destinazione);
  a.setPensione(pensione);
  a.setnMaxPartecipanti(nMaxPartecipanti);
  a.setnStanzeLetto(nStanzeLetto);
  a.setnBagni(nBagni);
  a.setnLetti(nLetti);
  a.setOfferte(offerta);
  alloggioRepository.save(a);
  return "Saved";
  }
  
  //AGGIUNTA NUOVO PACCHETTO
  @PostMapping(path="/addPacchetto") // Map ONLY POST Requests
  public @ResponseBody String addNewPacchetto (@RequestParam String descrizione,@RequestParam String destinazione,
		  @RequestParam Integer nMaxPartecipanti,@RequestParam Integer codViaggioPacchetto,@RequestParam Integer codAlloggioPacchetto,
		   Integer codViaggioRitorno,@RequestParam Offerta offerta) {
  Vacanza p = new Vacanza();
  p.setCodPacchetto(p.getIdVacanza());
  p.setDescrizione(descrizione);
  p.setDestinazione(destinazione);
  p.setnMaxPartecipanti(nMaxPartecipanti);
  p.setCodViaggioPacchetto(codViaggioPacchetto);
  p.setCodAlloggioPacchetto(codAlloggioPacchetto);
  p.setCodViaggioRitornoPacchetto(codViaggioRitorno);
  p.setOfferte(offerta);
  pacchettoRepository.save(p);
  return "Saved";
  }
  //AGGIUNTA NUOVO VIAGGIO
  @PostMapping(path="/addViaggio") // Map ONLY POST Requests
  public @ResponseBody String addNewViaggio (@RequestParam String descrizione,@RequestParam String destinazione,
		  @RequestParam Double orarioPartenza,@RequestParam Double orarioArrivo,@RequestParam Integer nBiglietti,
		  @RequestParam String luogoArrivo,@RequestParam String luogoPartenza,@RequestParam tipoMezzo tipoMezzo,
		  @RequestParam Offerta offerta){
  Vacanza v = new Vacanza();
  v.setCodViaggio(v.getIdVacanza());
  v.setDescrizione(descrizione);
  v.setDestinazione(destinazione);
  v.setOrarioPartenza(orarioPartenza);
  v.setOrarioArrivo(orarioArrivo);
  v.setnBiglietti(nBiglietti);
  v.setLuogoPartenza(luogoPartenza);
  v.setLuogoArrivo(luogoArrivo);
  v.setTipoMezzo(tipoMezzo);
  v.setOfferte(offerta);
  viaggioRepository.save(v);
  return "Saved";
  } 
  
  //AGGIUNTA NUOVA RECENSIONE
//AGGIUNTA NUOVO VIAGGIO
  @PostMapping(path="/addRecensione") // Map ONLY POST Requests
  public @ResponseBody String addNewRecensione (@RequestParam String commento,@RequestParam stelle stelle,
		  @RequestParam Date data,@RequestParam Integer codAlloggio,@RequestParam Vacanza vacanza) {
  Recensione r = new Recensione();
  r.setCommento(commento);
  r.setData(data);
  r.setStelle(stelle);
  r.setVacanza(vacanza);
  recensioneRepository.save(r);
  return "Saved";
  }
  
  
  
  //AGGIUNTA STORIOCOPRENOTAZIONE
  @PostMapping(path="/addStoricoPrenotazione") // Map ONLY POST Requests
  public @ResponseBody String addNewStoricoPrenotazione (@RequestParam Offerta offerta,@RequestParam Utente utente,
		  @RequestParam Prenotazione prenotazione,@RequestParam String descrizione) {
  StoricoPrenotazione s = new StoricoPrenotazione();
  s.setPrezzo(offerta.getPrezzo());
  s.setDataInizio(offerta.getDateInizio());
  s.setDataFine(offerta.getDataFine());
  s.setUtente(utente);
  s.setDescrizione(descrizione);
  storicoPrenotazioneRepository.save(s);
  return "Saved";
  }
  
  //AGGIUNTA PRENOTAZIONE
  @PostMapping(path="/addPrenotazione") // Map ONLY POST Requests
  public @ResponseBody String addNewPrenotazione (@RequestParam Offerta offerta,@RequestParam Utente utente,
		  @RequestParam StoricoPrenotazione storicoPrenotazione) {
  Prenotazione p = new Prenotazione();
  p.setOfferta(offerta);
  p.setUtente(utente);
  p.setStoricoPrenotazione(storicoPrenotazione);
  prenotazioneRepository.save(p);
  return "Saved";
  }
  @GetMapping(path="/getStoricoPrenotazione")
  public @ResponseBody Iterable<StoricoPrenotazione> getAllStoricoPrenotazioni() {
    // This returns a JSON or XML with the users
    return storicoPrenotazioneRepository.findAll();
  }
  @GetMapping(path="/getUtenti")
  public @ResponseBody Iterable<Utente> getAllUtenti() {
    // This returns a JSON or XML with the users
    return utenteRepository.findAll();
  }
  @GetMapping(path="/getOfferte")
  public @ResponseBody Iterable<Offerta> getAllOfferte() {
    // This returns a JSON or XML with the users
    return offertaRepository.findAll();
  }
  @GetMapping(path="/getAlloggi")
  public @ResponseBody Iterable<Vacanza> getAllAlloggi() {
    // This returns a JSON or XML with the users
    return alloggioRepository.findAll();
  }
  @GetMapping(path="/getPacchetti")
  public @ResponseBody Iterable<Vacanza> getAllPacchetti() {
    // This returns a JSON or XML with the users
    return pacchettoRepository.findAll();
  }
  @GetMapping(path="/getViaggi")
  public @ResponseBody Iterable<Vacanza> getAllViaggi() {
    // This returns a JSON or XML with the users
    return viaggioRepository.findAll();
  }
  @GetMapping(path="/getPrenotazione")
  public @ResponseBody Iterable<Prenotazione> getAllPrenotazioni() {
    // This returns a JSON or XML with the users
    return prenotazioneRepository.findAll();
  }
  
  
}